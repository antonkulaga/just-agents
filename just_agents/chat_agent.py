import pathlib
from string import Template

import loguru
from pydantic import BaseModel, Field

from just_agents.llm_session import LLMSession
from typing import Any, Dict, List, Optional
from just_agents.utils import load_config

class ChatAgent(LLMSession):
    """
    Default agent class, it assumes that each agent has role, goal and background story.
    """
    role: str = Field(description="Role of the agent")
    goal: Optional[str] = Field(description="Goal of the agent", default=None)
    backstory: Optional[str] = Field(description="Backstory of the agent", default=None)
    config: Dict[str, Any] = Field(description="Configuration dictionary for the agent, usually loaded from yaml", default_factory=lambda: load_config("agent.yaml"))
    agent_prompt: Optional[str] = Field(description="prompt used by the agent, usually generated by the template", default=None)

    def __post_init__(self):
        # Call the __post_init__ of the Session class
        super().__post_init__()
        agent_template: Optional[Template]  = Template(self.config["agent_prompt"])
        self.logger_template = self.role + " AGENT: " + "{time} {level} {message}"
        self.agent_prompt= agent_template.safe_substitute(role = self.role, goal = self.goal, backstory = self.backstory)
